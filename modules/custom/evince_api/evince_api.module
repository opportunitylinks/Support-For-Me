<?php
/**
 * @file
 * evince webservice api
 *
 * provides an abstraction layer on top of the evince api at http://api.evince-online.com
 */

require_once('simplepie/simplepie.inc');

/**
 * Implementation of hook_user()
 *
 * destroy session cookie so anon user does not see last auth user search
 *
 */
function evince_api_user($op, &$edit, $account, $category) {
  if ($op == 'logout') {
    if (ini_get("session.use_cookies")) {
      $params = session_get_cookie_params();
      setcookie(session_name(), '', time() - 42000, $params['path'], $params['domain'], $params['secure'], $params['httponly']);
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function evince_api_perm() {
  return array('administer evince api');
}

/**
 * Implementation of hook_menu().
 */
function evince_api_menu() {
  $items['admin/settings/evince-api'] = array(
    'title' => 'Evince API settings',
    'description' => 'Configure the evince api settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evince_api_admin_settings'),
    'access arguments' => array('administer evince api'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'evince_api.admin.inc',
  );
  return $items;
}

/**
 * evince_api_faceted_search
 *
 * Faceted search function.
 *
 * $record_types	an array of record type names e.g. array('events', 'organisations')
 * $search_text		search text
 * $start		zero-based number of first record to retrieve (default 0)
 * $count		count of records to retrieve
 * $sort		name of field on which to sort
 * $sort_order		'asc' or 'desc'
 * $facet		array of facet keywords
 * $filters		array of fieldname:value pairs on which to filter results
 * $starting_with	single letter/digit to filter records starting with ...
 * $latitude		lat
 * $longitude		long
 * $radius		radius
 *
 * returns array(
 *   'entries' => array of search results
 *   'count' => number of results
 *   'facets' => array of facet info
 *   'status' => 'OK' or $feed->error() or 'not configured'
 *   'url' => the web service url invoked (as a link)
 *   'url_parts' => url broken into parts, each on a new line
 *   )
 */
function evince_api_facet_search($record_types=array(), $search_text='%', $start=0, $count=0, $sort=NULL, $sort_order='asc', $facets=array(), $filters=array(), $starting_with = NULL, $latitude = NULL, $longitude = NULL, $radius = NULL) {

  $results = array();

  if (!variable_get('evince_api_url', '')) {
    $results['status'] = 'not configured';
    return $results;
  }
  $url_parts[] = variable_get('evince_api_url', '');
  $url_parts[] = variable_get('evince_api_snac', '');
  $url_parts[] = 'public/search';
  $url_parts[] = $radius ? 'geo.atom' : 'facet.atom';

  $marker = variable_get('evince_api_marker', '');
  if ($marker) {
    $query_parts[] = 'marker='. $marker;
  }

  foreach ($record_types as $record_type) {
    if ($record_type) {
      $query_parts[] = 'recordtype='. $record_type;
    }
  }

  if ($search_text) {
    $query_parts[] = 'quicksearch='. $search_text;
  }

  // count works only if start specified too
  if ($count) {
    $query_parts[] = 'startindex='. $start;
    $query_parts[] = 'count='. $count;
  }

  if ($sort) {
    $query_parts[] = 'sort='. $sort;
  }

  if ($sort_order) {
    $query_parts[] = 'sortorder='. $sort_order;
  }

  foreach ((array)$facets as $facet) {
    if ($facet) {
      $query_parts[] = 'facet='. $facet;
    }
  }

  if ($radius) {
    $query_parts[] = 'lat='. $latitude;
    $query_parts[] = 'long='. $longitude;
    $query_parts[] = 'radius='. $radius;
  }

  foreach ((array)$filters as $filter) {
    $filter_parts = explode(':', $filter);
    $filter_parts[1] = urlencode($filter_parts[1]);
    $query_parts[] = implode(':', $filter_parts);
  }

  if ($starting_with) {
    $query_parts[] = 'title='. $starting_with .'*';
  }

  $query_parts[] = 'key='. variable_get('evince_api_api_key', '');

  // join url and quersystring - don't urlencode everything, just convert spaces
  $url = implode('/', $url_parts) .'?'. str_replace(' ', '%20', implode('&', $query_parts));

  $results['url'] = l($url, $url);
  $results['url_parts'] = str_replace(array('&', '?'), '<br />&', $url);

  // use drupal_http_request to grab the data because simplepie set_feed_url generates an error
  $headers = array();
  $method = 'GET';
  $data = NULL;
  $retries = 0;

  $time_start = microtime(TRUE);
  $response = drupal_http_request($url, $headers, $method, $data, $retry);
  $time_end = microtime(TRUE);
  $duration = round($time_end - $time_start, 4);
  watchdog('evince', 'web service call: '. $duration);
  watchdog('evince', 'web service call: '. $url);

  $feed = new SimplePie();
  $feed->set_raw_data($response->data);
  $feed->enable_order_by_date(false);
  $feed->init();

  if ($feed->error()) {
    drupal_set_message($feed->error());
    $results['status'] = $feed->error();
  }
  else {
    $results = array_merge($results, evince_api_get_results_from_feed($feed));

    $results['facets'] = $feed->get_feed_tags('http://opp-links.org.uk/XMLSchema/FacetResults', 'facets');

    $opensearch = $feed->get_channel_tags('http://a9.com/-/spec/opensearch/1.1/', 'totalResults');
    $results['opensearch']['totalResults'] = $opensearch[0]['data'];
    $opensearch = $feed->get_channel_tags('http://a9.com/-/spec/opensearch/1.1/', 'startIndex');
    $results['opensearch']['startIndex'] = $opensearch[0]['data'];
    $opensearch = $feed->get_channel_tags('http://a9.com/-/spec/opensearch/1.1/', 'itemsPerPage');
    $results['opensearch']['itemsPerPage'] = $opensearch[0]['data'];

    $results['status'] = 'OK';
  }

  return $results;
}

/**
 * evince_api_get_categories
 *
 * return a list of all top level categories
 *
 */
function evince_api_get_categories() {
  $url_parts[] = variable_get('evince_api_url', '');
  $url_parts[] = variable_get('evince_api_snac', '');
  $url_parts[] = 'public/categories.atom';

  $marker = variable_get('evince_api_marker', '');
  if ($marker) {
    $query_parts[] = 'marker='. $marker;
  }

  $query_parts[] = 'key='. variable_get('evince_api_api_key', '');

  $url = implode('/', $url_parts) .'?'. implode('&', $query_parts);

  // use drupal_http_request to grab the data because simplepie set_feed_url generates an error
  $headers = array();
  $method = 'GET';
  $data = NULL;
  $retries = 0;
  $response = drupal_http_request($url, $headers, $method, $data, $retry);

  $feed = new SimplePie();
  $feed->set_raw_data($response->data);
  $feed->enable_order_by_date(false);
  $feed->init();

  $results = array();

  if ($feed->error()) {
    drupal_set_message($feed->error());
    $results['status'] = $feed->error();
  }
  else {
    foreach ($feed->get_items() as $item) {
      $results['entries'][] = array(
        'title' => $item->get_title(),
        'id' => $item->get_id(),
        'content' => $item->get_item_tags('http://www.w3.org/2005/Atom', 'content'),
      );
    }
    $results['status'] = 'OK';
  }
  return $results;
}

/**
 * evince_api_browse_category
 *
 * return subcategories for a category
 *
 * $category_id	id of the category to be browsed
 *
 */
function evince_api_browse_category($category_id) {

  $url_parts[] = variable_get('evince_api_url', '');
  $url_parts[] = variable_get('evince_api_snac', '');
  $url_parts[] = 'public/categories';
  $url_parts[] = $category_id;
  $url_parts[] = 'browse';

  $marker = variable_get('evince_api_marker', '');
  if ($marker) {
    $query_parts[] = 'marker='. $marker;
  }

  $query_parts[] = 'key='. variable_get('evince_api_api_key', '');

  $url = implode('/', $url_parts) .'?'. implode('&', $query_parts);

  $headers = array();
  $method = 'GET';
  $data = NULL;
  $retries = 0;
  $response = drupal_http_request($url, $headers, $method, $data, $retry);

  return $response;
}

/**
 * evince_api_category_info
 *
 * return category info for a category
 *
 * $category_id	id of the category
 * $term_id	id of the category term
 *
 */
function evince_api_category_info($category_id, $term_id) {

  $url_parts[] = variable_get('evince_api_url', '');
  $url_parts[] = variable_get('evince_api_snac', '');
  $url_parts[] = 'public/categories';
  $url_parts[] = $category_id;
  $url_parts[] = 'browse';

  $marker = variable_get('evince_api_marker', '');
  if ($marker) {
    $query_parts[] = 'marker='. $marker;
  }

  $query_parts[] = 'termid='. $term_id;
  $query_parts[] = 'key='. variable_get('evince_api_api_key', '');

  $url = implode('/', $url_parts) .'?'. implode('&', $query_parts);

  $headers = array();
  $method = 'GET';
  $data = NULL;
  $retries = 0;
  $response = drupal_http_request($url, $headers, $method, $data, $retry);

  return $response;
}

/**
 * evince_api_records_in_term
 *
 * return records in a category term
 *
 * $category_id	id of the category
 * $term_id	id of the category term
 *
 */
function evince_api_records_in_term($category_id, $term_id) {

  $url_parts[] = variable_get('evince_api_url', '');
  $url_parts[] = variable_get('evince_api_snac', '');
  $url_parts[] = 'public/search';

  $query_parts[] = 'recordtype=ascservices';
  $query_parts[] = 'recordtype=ascserviceproviders';
  $query_parts[] = $category_id .'_externaltermid='. $term_id;
  $marker = variable_get('evince_api_marker', '');
  if ($marker) {
    $query_parts[] = 'marker='. $marker;
  }
  $query_parts[] = 'key='. variable_get('evince_api_api_key', '');

  $url = implode('/', $url_parts) .'?'. implode('&', $query_parts);

  $headers = array();
  $method = 'GET';
  $data = NULL;
  $retries = 0;
  $response = drupal_http_request($url, $headers, $method, $data, $retry);

  $feed = new SimplePie();
  $feed->set_raw_data($response->data);
  $feed->enable_order_by_date(false);
  $feed->init();

  if ($feed->error()) {
    drupal_set_message($feed->error());
    $results['status'] = $feed->error();
  }
  else {
    $results = evince_api_get_results_from_feed($feed);

    $opensearch = $feed->get_channel_tags('http://a9.com/-/spec/opensearch/1.1/', 'totalResults');
    $results['opensearch']['totalResults'] = $opensearch[0]['data'];
    $opensearch = $feed->get_channel_tags('http://a9.com/-/spec/opensearch/1.1/', 'startIndex');
    $results['opensearch']['startIndex'] = $opensearch[0]['data'];
    $opensearch = $feed->get_channel_tags('http://a9.com/-/spec/opensearch/1.1/', 'itemsPerPage');
    $results['opensearch']['itemsPerPage'] = $opensearch[0]['data'];

    $results['status'] = 'OK';
  }
  $results['url'] = $url;

  return $results;
}

/**
 * evince_api_get_record
 *
 * get a single record
 *
 * $record_type	a record type e.g 'events', 'organisations'
 * $record_id	id of the record to be fetched
 *
 */
function evince_api_get_record($record_type, $record_id) {
  if (!in_array($record_type, array('ascservices', 'ascserviceproviders', 'events', 'organisations')) || !is_numeric($record_id)) {
    return NULL;
  }

  $url_parts[] = variable_get('evince_api_url', '');
  $url_parts[] = variable_get('evince_api_snac', '');
  $url_parts[] = 'public';
  $url_parts[] = $record_type;
  $url_parts[] = $record_id;

  $query_parts[] = 'key='. variable_get('evince_api_api_key', '');

  $url = implode('/', $url_parts) .'?'. implode('&', $query_parts);

  $headers = array();
  $method = 'GET';
  $data = NULL;
  $retries = 0;
  $response = drupal_http_request($url, $headers, $method, $data, $retry);
  return $response;
}

/**
 * evince_api_get_results_from_feed
 *
 * create resulta array from feed items
 *
 * $feed    the feed
 *
 * returns  results array
 *
 */
function evince_api_get_results_from_feed($feed = NULL) {
  $results = array();
  foreach ($feed->get_items() as $item) {
    $subitem = $item->get_item_tags('http://www.w3.org/2005/Atom', 'content');
    $subitem = $subitem[0]['child']['http://opp-links.org.uk/XMLSchema/AtomModel']['model'][0]['child']['http://opp-links.org.uk/XMLSchema/AtomModel'];

    $email = $subitem['email'][0]['data'];
    $contacts['email'] = $email;

    foreach ((array)$subitem['contactnumber'] as $contactnumber) {
      $cn = $contactnumber['child']['http://opp-links.org.uk/XMLSchema/AtomModel'];
      $type = $cn['type'][0]['data'];
      $nunmber = $cn['number'][0]['data'];
      $contacts[$type] = $nunmber;
    }
    $number = '';
    if ($contacts['Telephone']) {
      $number = $contacts['Telephone'];
    }
    elseif ($contacts['Mobile']) {
      $number = $contacts['Mobile'];
    }

    $startdate = $subitem['startdate'][0]['data'];
    $enddate = $subitem['enddate'][0]['data'];
    $periods = $subitem['availability'][0]['child']['http://opp-links.org.uk/XMLSchema/AtomModel']['period'];
    $repeats = array();
    foreach ((array)$periods as $period) {
      $p = $period['child']['http://opp-links.org.uk/XMLSchema/AtomModel'];
      $pparts['day'] = $p['day'][0]['data'];
      $pparts['starttime'] = $p['starttime'][0]['data'];
      $pparts['endtime'] = $p['endtime'][0]['data'];
      $repeats[] = $pparts;
    }

    foreach ((array)$subitem['description'] as $contactnumber) {
      $cn = $contactnumber['child']['http://opp-links.org.uk/XMLSchema/AtomModel'];
      $type = $cn['type'][0]['data'];
      $nunmber = $cn['number'][0]['data'];
      $contacts[$type] = $nunmber;
    }

    $latitude = $item->get_item_tags('http://a9.com/-/opensearch/extensions/geo/1.0/', 'lat');
    $longitude = $item->get_item_tags('http://a9.com/-/opensearch/extensions/geo/1.0/', 'lon');
    $location = $item->get_item_tags('http://a9.com/-/opensearch/extensions/geo/1.0/', 'locationString');
    $relevance = $item->get_item_tags('http://a9.com/-/opensearch/extensions/relevance/1.0/', 'score');
    $full_descriptions = $item->get_item_tags('http://opp-links.org.uk/XMLSchema/AtomModel', 'description');
    $full_description = $full_descriptions[1]['data'];
    $results['entries'][] = array(
      'title' => $item->get_title(),
      //'description' =>$full_description,
      'description' => $item->get_description(),
      'latitude' => $latitude[0]['data'],
      'longitude' => $longitude[0]['data'],
      'location' => $location[0]['data'],
      'relevance' => $relevance[0]['data'],
      'startdate' => $startdate,
      'enddate' => $enddate,
      'repeats' => $repeats,
      'contact' => $number ? $number : $email,
      'contacts' => $contacts,
      'content' => $item->get_item_tags('http://www.w3.org/2005/Atom', 'content'),
      'full_data' => $item,
    );
  }
  return $results;
}
